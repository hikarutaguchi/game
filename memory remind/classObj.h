#pragma once
#include <list>
#include <memory>
class Obj;

using sharedObj		= std::shared_ptr<Obj>;					// Objｸﾗｽへのｼｪｱﾄﾞﾎﾟｲﾝﾀ
using sharedObjList = std::list<sharedObj>;					// shered_ptrのﾘｽﾄ
using sharedListObj = std::shared_ptr<sharedObjList>;		// sharedObjListを所有権ありで使用
using weekListObj	= std::weak_ptr<sharedObjList>;			// sharedObjListを所有権なしで使用
using ListObj_itr	= sharedObjList::iterator;				// 登録先へのｱｸｾｽ,ｲﾃﾚｰﾀｰ

struct AddObjList
{
	ListObj_itr operator ()(weekListObj objList, sharedObj objPtr)
	{
		objList.lock()->push_back(std::move(objPtr));		// 所有権を移しつつﾘｽﾄに追加
		ListObj_itr itr = objList.lock()->end();
		itr--;
		return itr;
	}
};