//#pragma once
#include "BaseScene.h"
#include "classObj.h"

#define PAD_BUTTON_MAX	28	// ボタン総数
#define PAD_INPUT_ON	1	// 押された
#define PAD_INPUT_OFF	0	// 押されてない。

enum eKeyInout
{
	CONTROLLER_1P_INPUT_UP,	// 十字キー上(1P)
	CONTROLLER_1P_INPUT_DOWN,	// 十字キー下(1P)
	CONTROLLER_1P_INPUT_LEFT,	// 十字キー左(1P)
	CONTROLLER_1P_INPUT_RIGHT,	// 十字キー右(1P)
	CONTROLLER_1P_INPUT_BUTTON01,	// ボタン１(1P)
	CONTROLLER_1P_INPUT_BUTTON02,	// ボタン２(1P)
	CONTROLLER_1P_INPUT_BUTTON03,	// ボタン３(1P)
	CONTROLLER_1P_INPUT_BUTTON04,	// ボタン４(1P)

	CONTROLLER_2P_INPUT_UP,	// 十字キー上(2P)
	CONTROLLER_2P_INPUT_DOWN,	// 十字キー下(2P)
	CONTROLLER_2P_INPUT_LEFT,	// 十字キー左(2P)
	CONTROLLER_2P_INPUT_RIGHT,	// 十字キー右(2P)
	CONTROLLER_2P_INPUT_BUTTON01,	// ボタン１(2P)
	CONTROLLER_2P_INPUT_BUTTON02,	// ボタン２(2P)
	CONTROLLER_2P_INPUT_BUTTON03,	// ボタン３(2P)
	CONTROLLER_2P_INPUT_BUTTON04,	// ボタン４(2P)

	CONTROLLER_INPUT_MAX,	// 使用ボタン総数
};

//ジョイパッド格納用構造体
struct tyAttachment {
	int intPadNo;	//パッド番号
	int intButtonHandle;	//ボタンハンドル
};

class PadCtr
{
public:
	//PadCtr();
	//~PadCtr();

	static PadCtr &GetInstance(void)
	{
		static PadCtr s_Instance;
		return s_Instance;
	}

	//キーとの割り当て
	void InputAttachmentGamepad(int ePadNo, int ePadHandle, int eAttachHandle);
	//押されたか？
	bool IsPush(int eAttachHandle);
	//離されているか？
	bool IsFree(int eAttachHandle);
	//離されたか？
	bool IsPull(int eAttachHandle);
	//押しっぱなしか？
	bool IsHold(int eAttachHandle);

	struct tyAttachment AttachGamepad_pad[CONTROLLER_INPUT_MAX];	//ジョイパッドのとアタッチ値
	int AttachGamepad_input[CONTROLLER_INPUT_MAX];	//パッドの入力情報(押されたかどうか)
	int AttachGamepad_input_Old[CONTROLLER_INPUT_MAX];	//パッドの入力情報(押されたかどうか)

	bool Updata(void);

private:
	//入力情報格納変数
	PadCtr();
	~PadCtr();
	int Init(void);
	void Draw();
	sharedListObj objList;			// ｲﾝｽﾀﾝｽした情報を登録
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <DxLib.h>
#include "PadCtr.h"

PadCtr::PadCtr()
{
	Init();
}

PadCtr::~PadCtr()
{
}

bool PadCtr::Updata()
{

	//入力情報の初期化
	memset(AttachGamepad_input, 0, sizeof(AttachGamepad_input));

	//使用するボタンのみを検索
	for (int i = 0; i < CONTROLLER_INPUT_MAX; i++)
	{
		int Pad = GetJoypadInputState(DX_INPUT_PAD1);		//設定されているジョイパッドの入力情報を取得

		if (Pad & (AttachGamepad_pad[i].intButtonHandle)) 		//入力フラグ
		{
			AttachGamepad_input[i] = PAD_INPUT_ON;
		}
	}

	//過去情報を格納
	memcpy(AttachGamepad_input_Old, &AttachGamepad_input, sizeof(AttachGamepad_input));

	return true;
}

bool PadCtr::IsPush(int eAttachHandle)			// 押されたか
{
	//前フレームボタンが離されていて、現フレームは押されているか
	if (AttachGamepad_input[eAttachHandle] == PAD_INPUT_ON
		&& AttachGamepad_input_Old[eAttachHandle] == PAD_INPUT_OFF) {
		//このフレームで離された
		return true;
	}
	//正常終了
	return false;
}

bool PadCtr::IsFree(int eAttachHandle)	// 押されてないか
{
	//ボタンが押されていないか
	if (AttachGamepad_input[eAttachHandle] == PAD_INPUT_OFF) {
		//押されていない
		return true;
	}
	//正常終了
	return false;
}

bool PadCtr::IsPull(int eAttachHandle)			// 離されたか(前回のフレームは押されていた)
{
	//ボタンが押されているか
	if (AttachGamepad_input[eAttachHandle] == PAD_INPUT_OFF
		&& AttachGamepad_input_Old[eAttachHandle] == PAD_INPUT_ON) {
		//押されている
		return true;
	}
	//正常終了
	return false;
}

bool PadCtr::IsHold(int eAttachHandle)			// 押しっぱなしか(前回のフレームから押されていた)
{
	//ボタンが押されているか
	if (AttachGamepad_input[eAttachHandle] == PAD_INPUT_ON) {
		//押されている
		return true;
	}
	//正常終了
	return false;
}

int PadCtr::Init(void)
{

	//一台目
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_UP, CONTROLLER_1P_INPUT_UP);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_DOWN, CONTROLLER_1P_INPUT_DOWN);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_LEFT, CONTROLLER_1P_INPUT_LEFT);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_RIGHT, CONTROLLER_1P_INPUT_RIGHT);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_1, CONTROLLER_1P_INPUT_BUTTON01);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_2, CONTROLLER_1P_INPUT_BUTTON02);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_3, CONTROLLER_1P_INPUT_BUTTON03);
	InputAttachmentGamepad(DX_INPUT_PAD1, PAD_INPUT_4, CONTROLLER_1P_INPUT_BUTTON04);

	//二台目
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_UP, CONTROLLER_2P_INPUT_UP);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_DOWN, CONTROLLER_2P_INPUT_DOWN);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_LEFT, CONTROLLER_2P_INPUT_LEFT);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_RIGHT, CONTROLLER_2P_INPUT_RIGHT);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_1, CONTROLLER_2P_INPUT_BUTTON01);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_2, CONTROLLER_2P_INPUT_BUTTON02);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_3, CONTROLLER_2P_INPUT_BUTTON03);
	InputAttachmentGamepad(DX_INPUT_PAD2, PAD_INPUT_4, CONTROLLER_2P_INPUT_BUTTON04);

	Draw();

	return 0;
}

void PadCtr::Draw()
{
	//ボタンが押されているか
	for (int i = 0; i < CONTROLLER_INPUT_MAX; i++)
	{
		if (IsPush(i)) {
			DrawFormatString(0, 0, GetColor(255, 255, 255), "ボタンが押されました。");
		}
		else if (IsPull(i)) {
			DrawFormatString(0, 0, GetColor(255, 255, 255), "ボタンが離されました。");
		}
		else if (IsHold(i)) {
			DrawFormatString(0, 0, GetColor(255, 255, 255), "ボタンがホールドされています。");
		}
		else if (IsFree(i)) {
			DrawFormatString(0, 0, GetColor(255, 255, 255), "ボタンが離されています。");
		}
	}

	//使用するボタンのみを検索
	for (int i = 0; i < CONTROLLER_INPUT_MAX; i++) {
		//ボタンは押されているか
		if (AttachGamepad_input[i] == PAD_INPUT_ON) {
			//ログ出力
			AppLogAdd("[%d]が押されました\n", i);
		}
	}
	ScreenFlip();

}

// 入力関連 　ボタンのバインド
void PadCtr::InputAttachmentGamepad(int ePadNo, int ePadHandle, int eAttachHandle) 
{
	AttachGamepad_pad[eAttachHandle].intPadNo = ePadNo;
	AttachGamepad_pad[eAttachHandle].intButtonHandle = ePadHandle;
}
